name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            targets: "x86_64-unknown-linux-gnu x86_64-unknown-linux-musl aarch64-unknown-linux-gnu"
            platform: linux
          - os: macos-latest
            targets: "x86_64-apple-darwin aarch64-apple-darwin"
            platform: macos
          - os: windows-latest
            targets: "x86_64-pc-windows-msvc"
            platform: windows
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform }}
      
      - name: Install cross-compilation tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Install cross-compilation tools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install newer bash if needed for build script
          if [[ ${BASH_VERSION%%.*} -lt 4 ]]; then
            brew install bash
          fi
      
      - name: Install cross-compilation tools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Make build script executable
        if: matrix.os != 'windows-latest'
        run: chmod +x build-all.sh
      
      - name: Install targets and build
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            bash build-all.sh --install-targets ${{ matrix.targets }}
          else
            ./build-all.sh --install-targets ${{ matrix.targets }}
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: target/release-builds/
          retention-days: 7

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Organize artifacts
        run: |
          mkdir -p release-artifacts
          find artifacts -name "v6-*" -type f | while read file; do
            cp "$file" release-artifacts/
          done
          
          # Create checksums for all artifacts
          cd release-artifacts
          for file in v6-*; do
            if [[ -f "$file" && ! "$file" =~ \.sha256$ ]]; then
              sha256sum "$file" > "${file}.sha256"
            fi
          done
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/v6
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64